[
  {
    "objectID": "docs/version-control.html",
    "href": "docs/version-control.html",
    "title": "Contrôle de version",
    "section": "",
    "text": "Le Datalab est une plateforme mutualisée : les ressources utilisées par les services sont partagées entre les différents utilisateurs. A ce titre, les services du Datalab fonctionnent sur le modèle des conteneurs éphémères : dans un usage standard, l’utilisateur lance un service, réalise des traitements de données, sauvegarde le code qui a permis de réaliser ces traitements, et supprime l’instance du service. Cette sauvegarde du code est grandement facilitée par l’usage du contrôle de version.\nCette considération de performance ne doit cependant pas être vue comme une contrainte : le contrôle de version est une bonne pratique essentielle de développement. Les bénéfices sont nombreux, aussi bien à titre individuel : \n\nle projet local est synchronisé avec un serveur distant, rendant la perte de code quasi impossible ; \nl’historique complet des choix et modifications effectuées sur le projet est conservé ;\nl’utilisateur peut parcourir cet historique pour rechercher les modifications qui ont pu créer des erreurs, et décider à tout moment de revenir à une version précédente du projet, ou bien de certains fichiers.\n\nque dans le cadre de projets collaboratifs : \n\nle travail simultané sur un même projet est possible, sans risque de perte ; \nl’utilisateur peut partager ses modifications tout en bénéficiant de celles des autres ;\nil devient possible de contribuer à des projets open-source, pour lesquels l’usage de Git est très largement standard.\n\n\n\n\n\n\n\nAvertissement\n\n\n\nCe tutoriel vise à présenter comment le contrôle de version peut être facilement implémenté grâce aux outils présents sur le Datalab. Il ne présente pas le fonctionnement de Git et présuppose donc une certaine familiarité avec l’outil. De nombreuses ressources en ligne peuvent servir d’introduction ; l’utilisateur de R pourra par exemple consulter ce guide et l’utilisateur de Python ce chapitre de cours. Une formation complète à Git sera bientôt proposée dans l’espace formationdu Datalab.\n\n\n\n\n\n\n\nBien qu’une utilisation hors-ligne de Git soit possible, tout l’intérêt du contrôle de version réside dans la synchronisation de la copie locale d’un projet (clone) avec un dépôt distant (remote). Différents services de forge logicielle permettent cette synchronisation des projets Git, dont les plus connus sont GitHubet GitLab. Dans la mesure où le premier dispose aujourd’hui de beaucoup plus de visibilité — par exemple, les dépôts de l’Insee, InseeFret InseeFrLab, sont sur GitHub — le Datalab propose une intégration facilitée avec GitHub, que nous présentons à travers ce tutoriel.\n\n\n\n\n\n\nAvertissement\n\n\n\nLa suite du tutoriel nécessite de disposer d’un compte GitHub.\n\n\n\n\n\n\n\n\nNote\n\n\n\nSi l’utilisation du Datalab avec la plateforme GitHub est facilitée, elle n’est en aucun cas obligatoire : il reste tout à fait possible d’utiliser la forge logicielle de son choix pour la synchronisation des projets. Une forge basée sur GitLabest notamment mise à disposition des utilisateurs du Datalab.\n\n\n\n\n\nLa synchronisation avec un dépôt distant nécessite une authentification auprès de GitHub. Celle-ci s’effectue à l’aide d’un jeton d’accès personnel, qui doit être généré à partir du compte GitHub de l’utilisateur. Le service de génération est accessible à cette adresse. La documentation GitHub(en Anglais) propose des illustrations pour guider le processus.\nPour générer un jeton, il est nécessaire de choisir un nom de jeton, un délai d’expiration et des droits d’accès (scope). Il est recommandé de choisir un délai court (30 jours) et un accès restreint (repo seulement) afin de limiter les risques de sécurité en cas de diffusion malveillante du jeton. \n\n\n\nConfiguration recommandée pour la génération d’un jeton d’accès GitHub\n\n\nUne fois le jeton généré, ce dernier apparaît à l’écran. Un jeton ne peut être visualisé qu’une seule fois ; en cas de perte, il faudra en générer un nouveau. \n\n\n\nIl est recommandé d’ajouter ses jetons d’accès à un gestionnaire de mots de passe. Le jeton peut également être ajouté à la configuration “Services externes” du compte utilisateur sur le Datalab, ce qui permet au jeton d’être directement accessible au sein des services proposés sur la plateforme.\n\n\n\nAjouter un jeton d’accès GitHub à un compte utilisateur sur le Datalab\n\n\n\n\n\n\n\n\nAvertissement\n\n\n\nAttention à bien utiliser dans les “Informations du compte” l’adresse mail associée à votre compte GitHub, c’est elle qui permet de lier effectivement les commits que vous effectuerez à votre compte GitHub.\n\n\n\n\n\n\nGit est préconfiguré pour fonctionner nativement avec les différents services pertinents du Datalab. A l’ouverture d’un service, il est possible de configurer certains éléments. Si l’on a ajouté un jeton d’accès GitHub à son compte sur le Datalab, ce dernier est pré-configuré. Il est par ailleurs possible d’indiquer l’URL complète d’un Repository Git (ex : https://github.com/InseeFrLab/onyxia), qui sera alors cloné à l’initialisation dans l’espace de travail de l’instance.\n\n\n\nConfiguration de Git à l’ouverture d’un service\n\n\n\n\nLe jeton d’accès GitHub est disponible dans le terminal des différents services via la variable d’environnement $GIT_PERSONAL_ACCESS_TOKEN. Afin d’éviter de devoir s’authentifier à chaque opération impliquant le dépôt distant (clone, push & pull), il est recommandé de cloner celui-ci en incluant le jeton d’accès dans le lien HTTPS, à l’aide de la commande suivante :\ngit clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/&lt;owner&gt;/&lt;repo&gt;.git\noù &lt;owner&gt; et &lt;repo&gt; sont à remplacer respectivement par le nom d’utilisateur et le nom du dépôt GitHub.\n\n\n\nLes principaux services de production de code disponibles sur le Datalab disposent d’une interface graphique pour faciliter l’utilisation de Git : \n\nRStudio : RStudio propose une interface graphique pour Git native et assez complète. La documentation utilitR présente son fonctionnement en détail ;\nJupyter : le plugin jupyterlab-gitpermet un interfaçage (assez sommaire) de Jupyter avec Git ;\nVSCode : VSCode propose nativement une interface graphique très bien intégrée avec Git et GitHub. Une documentation détaillée(en Anglais) présente les possibilités de l’outil. \n\n\n\n\n\n\n\nAvertissement\n\n\n\nLes interfaces graphiques facilitent la prise en main de Git, mais ne remplacent jamais complètement l’usage de l’outil via un terminal du fait d’une intégration nécessairement imparfaite. Il est donc utile de se familiariser avec l’usage de Git via le terminal le plus tôt possible."
  },
  {
    "objectID": "docs/version-control.html#pourquoi-utiliser-le-contrôle-de-version",
    "href": "docs/version-control.html#pourquoi-utiliser-le-contrôle-de-version",
    "title": "Contrôle de version",
    "section": "",
    "text": "Le Datalab est une plateforme mutualisée : les ressources utilisées par les services sont partagées entre les différents utilisateurs. A ce titre, les services du Datalab fonctionnent sur le modèle des conteneurs éphémères : dans un usage standard, l’utilisateur lance un service, réalise des traitements de données, sauvegarde le code qui a permis de réaliser ces traitements, et supprime l’instance du service. Cette sauvegarde du code est grandement facilitée par l’usage du contrôle de version.\nCette considération de performance ne doit cependant pas être vue comme une contrainte : le contrôle de version est une bonne pratique essentielle de développement. Les bénéfices sont nombreux, aussi bien à titre individuel : \n\nle projet local est synchronisé avec un serveur distant, rendant la perte de code quasi impossible ; \nl’historique complet des choix et modifications effectuées sur le projet est conservé ;\nl’utilisateur peut parcourir cet historique pour rechercher les modifications qui ont pu créer des erreurs, et décider à tout moment de revenir à une version précédente du projet, ou bien de certains fichiers.\n\nque dans le cadre de projets collaboratifs : \n\nle travail simultané sur un même projet est possible, sans risque de perte ; \nl’utilisateur peut partager ses modifications tout en bénéficiant de celles des autres ;\nil devient possible de contribuer à des projets open-source, pour lesquels l’usage de Git est très largement standard.\n\n\n\n\n\n\n\nAvertissement\n\n\n\nCe tutoriel vise à présenter comment le contrôle de version peut être facilement implémenté grâce aux outils présents sur le Datalab. Il ne présente pas le fonctionnement de Git et présuppose donc une certaine familiarité avec l’outil. De nombreuses ressources en ligne peuvent servir d’introduction ; l’utilisateur de R pourra par exemple consulter ce guide et l’utilisateur de Python ce chapitre de cours. Une formation complète à Git sera bientôt proposée dans l’espace formationdu Datalab."
  },
  {
    "objectID": "docs/version-control.html#intégration-de-github-avec-le-datalab",
    "href": "docs/version-control.html#intégration-de-github-avec-le-datalab",
    "title": "Contrôle de version",
    "section": "",
    "text": "Bien qu’une utilisation hors-ligne de Git soit possible, tout l’intérêt du contrôle de version réside dans la synchronisation de la copie locale d’un projet (clone) avec un dépôt distant (remote). Différents services de forge logicielle permettent cette synchronisation des projets Git, dont les plus connus sont GitHubet GitLab. Dans la mesure où le premier dispose aujourd’hui de beaucoup plus de visibilité — par exemple, les dépôts de l’Insee, InseeFret InseeFrLab, sont sur GitHub — le Datalab propose une intégration facilitée avec GitHub, que nous présentons à travers ce tutoriel.\n\n\n\n\n\n\nAvertissement\n\n\n\nLa suite du tutoriel nécessite de disposer d’un compte GitHub.\n\n\n\n\n\n\n\n\nNote\n\n\n\nSi l’utilisation du Datalab avec la plateforme GitHub est facilitée, elle n’est en aucun cas obligatoire : il reste tout à fait possible d’utiliser la forge logicielle de son choix pour la synchronisation des projets. Une forge basée sur GitLabest notamment mise à disposition des utilisateurs du Datalab.\n\n\n\n\n\nLa synchronisation avec un dépôt distant nécessite une authentification auprès de GitHub. Celle-ci s’effectue à l’aide d’un jeton d’accès personnel, qui doit être généré à partir du compte GitHub de l’utilisateur. Le service de génération est accessible à cette adresse. La documentation GitHub(en Anglais) propose des illustrations pour guider le processus.\nPour générer un jeton, il est nécessaire de choisir un nom de jeton, un délai d’expiration et des droits d’accès (scope). Il est recommandé de choisir un délai court (30 jours) et un accès restreint (repo seulement) afin de limiter les risques de sécurité en cas de diffusion malveillante du jeton. \n\n\n\nConfiguration recommandée pour la génération d’un jeton d’accès GitHub\n\n\nUne fois le jeton généré, ce dernier apparaît à l’écran. Un jeton ne peut être visualisé qu’une seule fois ; en cas de perte, il faudra en générer un nouveau. \n\n\n\nIl est recommandé d’ajouter ses jetons d’accès à un gestionnaire de mots de passe. Le jeton peut également être ajouté à la configuration “Services externes” du compte utilisateur sur le Datalab, ce qui permet au jeton d’être directement accessible au sein des services proposés sur la plateforme.\n\n\n\nAjouter un jeton d’accès GitHub à un compte utilisateur sur le Datalab\n\n\n\n\n\n\n\n\nAvertissement\n\n\n\nAttention à bien utiliser dans les “Informations du compte” l’adresse mail associée à votre compte GitHub, c’est elle qui permet de lier effectivement les commits que vous effectuerez à votre compte GitHub."
  },
  {
    "objectID": "docs/version-control.html#utiliser-git-avec-les-services-du-datalab",
    "href": "docs/version-control.html#utiliser-git-avec-les-services-du-datalab",
    "title": "Contrôle de version",
    "section": "",
    "text": "Git est préconfiguré pour fonctionner nativement avec les différents services pertinents du Datalab. A l’ouverture d’un service, il est possible de configurer certains éléments. Si l’on a ajouté un jeton d’accès GitHub à son compte sur le Datalab, ce dernier est pré-configuré. Il est par ailleurs possible d’indiquer l’URL complète d’un Repository Git (ex : https://github.com/InseeFrLab/onyxia), qui sera alors cloné à l’initialisation dans l’espace de travail de l’instance.\n\n\n\nConfiguration de Git à l’ouverture d’un service\n\n\n\n\nLe jeton d’accès GitHub est disponible dans le terminal des différents services via la variable d’environnement $GIT_PERSONAL_ACCESS_TOKEN. Afin d’éviter de devoir s’authentifier à chaque opération impliquant le dépôt distant (clone, push & pull), il est recommandé de cloner celui-ci en incluant le jeton d’accès dans le lien HTTPS, à l’aide de la commande suivante :\ngit clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/&lt;owner&gt;/&lt;repo&gt;.git\noù &lt;owner&gt; et &lt;repo&gt; sont à remplacer respectivement par le nom d’utilisateur et le nom du dépôt GitHub.\n\n\n\nLes principaux services de production de code disponibles sur le Datalab disposent d’une interface graphique pour faciliter l’utilisation de Git : \n\nRStudio : RStudio propose une interface graphique pour Git native et assez complète. La documentation utilitR présente son fonctionnement en détail ;\nJupyter : le plugin jupyterlab-gitpermet un interfaçage (assez sommaire) de Jupyter avec Git ;\nVSCode : VSCode propose nativement une interface graphique très bien intégrée avec Git et GitHub. Une documentation détaillée(en Anglais) présente les possibilités de l’outil. \n\n\n\n\n\n\n\nAvertissement\n\n\n\nLes interfaces graphiques facilitent la prise en main de Git, mais ne remplacent jamais complètement l’usage de l’outil via un terminal du fait d’une intégration nécessairement imparfaite. Il est donc utile de se familiariser avec l’usage de Git via le terminal le plus tôt possible."
  },
  {
    "objectID": "docs/principles.html",
    "href": "docs/principles.html",
    "title": "Principes du Datalab",
    "section": "",
    "text": "Le projet Onyxia part du constat de difficultés communes rencontrées par les datascientists du secteur public :\n\ndes agents souvent isolés, du fait de la relative rareté des compétences data dans l’administration ;\ndes infrastructures inadaptées, aussi bien en matière de ressources que de technologies, qui constituent un frein à l’innovation ;\nune difficulté à passer de l’expérimentation à la mise en production, du fait de multiples séparations (séparation physique, langage de développement, modes de travail) entre les directions métier et la production informatique.\n\nFace à ce constat, le Datalab SSPCloud a été construit pour proposer une plateforme de mutualisation à plusieurs niveaux :\n\npartage d’une infrastructure moderne, centrée autour du déploiement de services via des conteneurs, et dimensionnée pour les usages de data science ;\npartage de méthodes, via une mutualisation des services de data science proposés, auxquels chacun peut contribuer ;\npartage de connaissances, via des formations associées au Datalab ainsi que la constitution de commaunautés d’entraide centrées sur son utilisation.\n\n\n\n\n\n\n\nNote\n\n\n\nOnyxia, Datalab SSP Cloud : quelles différences ?\nOnyxiaest un projet open-source qui propose une plateforme de services de data science, accessible via une application Web. Le Datalab SSP Cloudest une instance du projet Onyxia, hébergée à l’Insee.\n\n\n\n\n\nL’architecture du Datalab est basée sur un ensemble de principes fondamentaux :\n\nune production orientée data science, en proposant une infrastructure dimensionnée à la plupart des usages et un catalogue de services couvrant l’ensemble du cycle de vie des projets data ;\ndes choix qui favorisent l’autonomie des usagers, en évitant tout enfermement propriétaire et en permettant l’accès aux couches basses de l’infrastructure pour couvrir les besoins avancés et spécifiques ;\nun projet 100% cloud-natif, mais également cloud-agnostique, permettant un déploiement simple sur n’importe quelle infrastructure ;\nun projet complètement open-source, à la fois du point de vue de ses briques constitutives que de sa diffusion (licence MIT).\n\n\n\n\nLe Datalab est accessible via une interface utilisateur moderne et réactive, centrée sur l’expérience utilisateur. Celle-ci constitue le liant technique entre les différentes composantes d’Onyxia :\n\ndes technologies open-source qui constituent l’état de l’art du déploiement et de l’orchestration de conteneurs, du stockage et de la sécurité ;\nun catalogue de services et d’outils pour accompagner les projets de data science ;\nune plateforme de formation et de documentation pour faciliter l’onboarding sur les technologies proposées.\n\n\n\n\nBriques fondamentales du Datalab Onyxia\n\n\nLe catalogue de services est pensé de manière à accomoder l’essentiel des usages des data scientists, du développement en self-service à la mise en production de traitements ou d’application. L’ensemble du cycle de vie d’un projet data est ainsi couvert, et le catalogue des services est régulièrement étendu pour répondre aux nouveaux besoins des utilisateurs.\n\n\n\nUn catalogue de services complet pour les projets de data science\n\n\n\n\n\nLe projet du Datalab Onyxia est résolument ouvert, à de multiples niveaux :\n\nle Datalab est accessible via son interface Web à tous les agents du service public (via AgentConnect ou une adresse mail en gouv.fr) ainsi qu’aux élèves des écoles de statistique liées à l’Insee (Cefil, Ensai, Ensae) ;\nle code source ouvert et la modularité du projet rendent possible le déploiement d’une instance Onyxia personnalisée sur n’importe quelle infrastructure basée sur un cluster Kubernetes ;\nle projet est ouvert aux contributions extérieures, qu’elles concernent le catalogue des services, l’interface graphique ou l’agencement des briques logicielles qui le constituent."
  },
  {
    "objectID": "docs/principles.html#une-plateforme-de-mutualisation",
    "href": "docs/principles.html#une-plateforme-de-mutualisation",
    "title": "Principes du Datalab",
    "section": "",
    "text": "Le projet Onyxia part du constat de difficultés communes rencontrées par les datascientists du secteur public :\n\ndes agents souvent isolés, du fait de la relative rareté des compétences data dans l’administration ;\ndes infrastructures inadaptées, aussi bien en matière de ressources que de technologies, qui constituent un frein à l’innovation ;\nune difficulté à passer de l’expérimentation à la mise en production, du fait de multiples séparations (séparation physique, langage de développement, modes de travail) entre les directions métier et la production informatique.\n\nFace à ce constat, le Datalab SSPCloud a été construit pour proposer une plateforme de mutualisation à plusieurs niveaux :\n\npartage d’une infrastructure moderne, centrée autour du déploiement de services via des conteneurs, et dimensionnée pour les usages de data science ;\npartage de méthodes, via une mutualisation des services de data science proposés, auxquels chacun peut contribuer ;\npartage de connaissances, via des formations associées au Datalab ainsi que la constitution de commaunautés d’entraide centrées sur son utilisation.\n\n\n\n\n\n\n\nNote\n\n\n\nOnyxia, Datalab SSP Cloud : quelles différences ?\nOnyxiaest un projet open-source qui propose une plateforme de services de data science, accessible via une application Web. Le Datalab SSP Cloudest une instance du projet Onyxia, hébergée à l’Insee."
  },
  {
    "objectID": "docs/principles.html#principes-fondamentaux",
    "href": "docs/principles.html#principes-fondamentaux",
    "title": "Principes du Datalab",
    "section": "",
    "text": "L’architecture du Datalab est basée sur un ensemble de principes fondamentaux :\n\nune production orientée data science, en proposant une infrastructure dimensionnée à la plupart des usages et un catalogue de services couvrant l’ensemble du cycle de vie des projets data ;\ndes choix qui favorisent l’autonomie des usagers, en évitant tout enfermement propriétaire et en permettant l’accès aux couches basses de l’infrastructure pour couvrir les besoins avancés et spécifiques ;\nun projet 100% cloud-natif, mais également cloud-agnostique, permettant un déploiement simple sur n’importe quelle infrastructure ;\nun projet complètement open-source, à la fois du point de vue de ses briques constitutives que de sa diffusion (licence MIT)."
  },
  {
    "objectID": "docs/principles.html#offre-de-services",
    "href": "docs/principles.html#offre-de-services",
    "title": "Principes du Datalab",
    "section": "",
    "text": "Le Datalab est accessible via une interface utilisateur moderne et réactive, centrée sur l’expérience utilisateur. Celle-ci constitue le liant technique entre les différentes composantes d’Onyxia :\n\ndes technologies open-source qui constituent l’état de l’art du déploiement et de l’orchestration de conteneurs, du stockage et de la sécurité ;\nun catalogue de services et d’outils pour accompagner les projets de data science ;\nune plateforme de formation et de documentation pour faciliter l’onboarding sur les technologies proposées.\n\n\n\n\nBriques fondamentales du Datalab Onyxia\n\n\nLe catalogue de services est pensé de manière à accomoder l’essentiel des usages des data scientists, du développement en self-service à la mise en production de traitements ou d’application. L’ensemble du cycle de vie d’un projet data est ainsi couvert, et le catalogue des services est régulièrement étendu pour répondre aux nouveaux besoins des utilisateurs.\n\n\n\nUn catalogue de services complet pour les projets de data science"
  },
  {
    "objectID": "docs/principles.html#un-projet-ouvert",
    "href": "docs/principles.html#un-projet-ouvert",
    "title": "Principes du Datalab",
    "section": "",
    "text": "Le projet du Datalab Onyxia est résolument ouvert, à de multiples niveaux :\n\nle Datalab est accessible via son interface Web à tous les agents du service public (via AgentConnect ou une adresse mail en gouv.fr) ainsi qu’aux élèves des écoles de statistique liées à l’Insee (Cefil, Ensai, Ensae) ;\nle code source ouvert et la modularité du projet rendent possible le déploiement d’une instance Onyxia personnalisée sur n’importe quelle infrastructure basée sur un cluster Kubernetes ;\nle projet est ouvert aux contributions extérieures, qu’elles concernent le catalogue des services, l’interface graphique ou l’agencement des briques logicielles qui le constituent."
  },
  {
    "objectID": "docs/configure.html",
    "href": "docs/configure.html",
    "title": "Configuration des services",
    "section": "",
    "text": "Après avoir cliqué sur “Nouveau service” &gt; “RStudio/Jupyter-python/VScode-python” &gt; “Lancer”\n\n\nPour reconnaître le service et/ou la configuration si on l’enregistre en cliquant sur le symbole de marque page en haut à droite. Si le nom existe déjà parmi les configurations enregistrées, l’enregistrement écrasera l’ancienne configuration.\nPratique pour distinguer différents services d’un même type (RStudio, Jupyter…).\n\n\n\nIl est possible de partager un service à un groupe de personnes en cochant la case “Partager le service” à l’ouverture du service. Les autres membres du groupe verront le service et pourront l’utiliser. La création de groupes se fait en écrivant aux administrateurs sur Tchap (en privé) ou par mail à l’adresse innovation@insee.fr, en communiquant le nom de groupe, les noms d’utilisateurs des membres, le besoin ou non d’un espace de stockage associé sur MinIO.\n\nPour un besoin ponctuel, il est aussi possible de partager un service que l’on a créé à une autre personne. Il suffit de lui communiquer l’URL (type https://user-aaaaaaaaaaaaaa-xxxxxxx-x.user.lab.sspcloud.fr/), ainsi que le mot de passe du service. Le nom d’utilisateur reste Onyxia. Attention, il est recommandé de changer le mot de passe du service lors de son lancement (onglet Security) pour ne pas le faire fuiter. Il faudra aussi décocher Enable IP protection et Enable network policy dans l’onglet Security. Une seule personne à la fois peut se connecter à un service RStudio.\n\n\n\n\n\n\n\n\n\n\n\n\nUn lien vers un script shell (enchaînement de commandes linux) qui est exécuté juste après le lancement du service. Pratique pour automatiser la mise en place de certaines configurations.\nCe lien du script doit être accessible sur internet, par exemple sur https://git.lab.sspcloud.fr/ avec un projet public ou sur le stockage S3 avec un fichier public.\nExemple de script d’initialisation qui clone un projet à partir d’une instance Gitlab privée, configure les options globales de RStudio, ouvre automatiquement le projet RStudio cloné, installe et sélectionne la correction orthographique française, personnalise les bribes de codes (snippets).\n\n\n\n\n\n\nAvertissement\n\n\n\nLe script est exécuté en tant que superutilisateur (Root) et les fichiers qu’il crée sont ainsi la propriété du superutilisateur. Ceci génère des erreurs ensuite quand ces fichiers sont appelés, par exemple des fichiers de configuration de RStudio. Pour rendre à l’utilisateur normal (qui s’appelle onyxia) les droit sur son dossier personnel :\nchown -R ${USERNAME}:${GROUPNAME} ${HOME}\n\n\n\n\n\nDes options à passer au script d’initialisation, séparées par des espaces et que l’on peut ensuite appeler avec $1, $2…\nPar exemple si on inscrit dans le champ PersonalInitArgs fichier1.txt fichier2.txt, et qu’on utilise ce script d’initialisation :\n#!/bin/bash\ntouch $1\ntouch $2\nLe script créera via la commande touch deux fichiers fichier1.txt et fichier2.txt.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nC’est le mot de passe à saisir lorsqu’on ouvre un service, celui donné par “Copier le mot de passage” sur la page des services. Il est fourni par le paramètre général “Mot de passe pour vos services” que l’on trouve dans “Mon Compte” &gt; “Informations du compte”, sauf si on en a défini un particulier au niveau du service.\n\n\n\nSi coché, le service n’est accessible que par une seule IP, à décocher si l’on souhaite travailler de deux endroits différents.\n\n\n\n\n\n\n\nPour apprendre à utiliser cet onglet, voir la page dédiée.\n\n\n\n\n\n\nAvertissement\n\n\n\nIl n’est pas possible de cloner automatiquement un projet privé d’une instance privée (c’est-à-dire autre que gitlab.com et github.com). Pour le faire, il faudra recourir à un script shell comme indiqué ici.\n\n\n\n\nSi coché, configure Git et tente un clone au démarrage du service.\n\n\n\nLe nom qui apparaîtra dans les commits (pas le nom d’utilisateur du compte Gitlab ou Github).\n\n\n\nL’adresse email qui apparaîtra dans les commits (pas forcément le mail associé au compte Gitlab ou Github).\n\n\n\n\n\n\nJeton d’accès défini sur la plateforme utilisée (Gitlab, Github…).\n\n\n\nL’URL obtenue sur la plateforme utilisée (Gitlab, Github…) en cliquant sur “Cloner” &gt; HTTPS.\nDe type :\nhttps://github.com/InseeFrLab/docs.sspcloud.fr.git\n\n\n\n\n\n\n\n\n\n\n\n\nPour apprendre à utiliser cet onglet, voir la page dédiée.\n\n\n\nOptions to pass to the initialization script, separated by spaces and can be subsequently called with $1, $2, etc.\nFor example, if you enter file1.txt file2.txt in the PersonalInitArgs field and use this initialization script:\n#!/bin/bash\ntouch $1\ntouch $2\nThe script will create two files, file1.txt and file2.txt, using the touch command.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is the password to enter when opening a service, which is provided by “Copy the password” on the service page. It is supplied by the general parameter “Password for your services,” which can be found in “My Account” &gt; “Account Information,” unless a specific one is defined at the service level.\n\n\n\nIf checked, the service is only accessible from a single IP. Uncheck it if you wish to work from different locations.\n\n\n\n\n\n\n\nTo learn how to use this tab, see the dedicated page.\n\n\n\n\n\n\nAvertissement\n\n\n\nIt is not possible to automatically clone a private project from a private instance (i.e., other than gitlab.com and github.com). To do so, you will need to use a shell script as indicated here.\n\n\n\n\nIf checked, configure Git and attempt a clone when the service starts.\n\n\n\nThe name that will appear in the commits (not the Gitlab or Github account username).\n\n\n\nThe email address that will appear in the commits (not necessarily the email associated with the Gitlab or Github account).\n\n\n\n\n\n\nAccess token defined on the platform used (Gitlab, Github…).\n\n\n\nThe URL obtained from the platform used (Gitlab, Github…) by clicking on “Clone” &gt; HTTPS.\nIn the format:\nhttps://github.com/InseeFrLab/docs.sspcloud.fr.git\n\n\n\n\n\n\n\n\n\n\n\n\nTo learn how to use this tab, see the dedicated page.\n:::"
  },
  {
    "objectID": "docs/configure.html#nom-personnalisé",
    "href": "docs/configure.html#nom-personnalisé",
    "title": "Configuration des services",
    "section": "",
    "text": "Pour reconnaître le service et/ou la configuration si on l’enregistre en cliquant sur le symbole de marque page en haut à droite. Si le nom existe déjà parmi les configurations enregistrées, l’enregistrement écrasera l’ancienne configuration.\nPratique pour distinguer différents services d’un même type (RStudio, Jupyter…)."
  },
  {
    "objectID": "docs/configure.html#partager-le-service",
    "href": "docs/configure.html#partager-le-service",
    "title": "Configuration des services",
    "section": "",
    "text": "Il est possible de partager un service à un groupe de personnes en cochant la case “Partager le service” à l’ouverture du service. Les autres membres du groupe verront le service et pourront l’utiliser. La création de groupes se fait en écrivant aux administrateurs sur Tchap (en privé) ou par mail à l’adresse innovation@insee.fr, en communiquant le nom de groupe, les noms d’utilisateurs des membres, le besoin ou non d’un espace de stockage associé sur MinIO.\n\nPour un besoin ponctuel, il est aussi possible de partager un service que l’on a créé à une autre personne. Il suffit de lui communiquer l’URL (type https://user-aaaaaaaaaaaaaa-xxxxxxx-x.user.lab.sspcloud.fr/), ainsi que le mot de passe du service. Le nom d’utilisateur reste Onyxia. Attention, il est recommandé de changer le mot de passe du service lors de son lancement (onglet Security) pour ne pas le faire fuiter. Il faudra aussi décocher Enable IP protection et Enable network policy dans l’onglet Security. Une seule personne à la fois peut se connecter à un service RStudio."
  },
  {
    "objectID": "docs/configure.html#init",
    "href": "docs/configure.html#init",
    "title": "Configuration des services",
    "section": "",
    "text": "Un lien vers un script shell (enchaînement de commandes linux) qui est exécuté juste après le lancement du service. Pratique pour automatiser la mise en place de certaines configurations.\nCe lien du script doit être accessible sur internet, par exemple sur https://git.lab.sspcloud.fr/ avec un projet public ou sur le stockage S3 avec un fichier public.\nExemple de script d’initialisation qui clone un projet à partir d’une instance Gitlab privée, configure les options globales de RStudio, ouvre automatiquement le projet RStudio cloné, installe et sélectionne la correction orthographique française, personnalise les bribes de codes (snippets).\n\n\n\n\n\n\nAvertissement\n\n\n\nLe script est exécuté en tant que superutilisateur (Root) et les fichiers qu’il crée sont ainsi la propriété du superutilisateur. Ceci génère des erreurs ensuite quand ces fichiers sont appelés, par exemple des fichiers de configuration de RStudio. Pour rendre à l’utilisateur normal (qui s’appelle onyxia) les droit sur son dossier personnel :\nchown -R ${USERNAME}:${GROUPNAME} ${HOME}\n\n\n\n\n\nDes options à passer au script d’initialisation, séparées par des espaces et que l’on peut ensuite appeler avec $1, $2…\nPar exemple si on inscrit dans le champ PersonalInitArgs fichier1.txt fichier2.txt, et qu’on utilise ce script d’initialisation :\n#!/bin/bash\ntouch $1\ntouch $2\nLe script créera via la commande touch deux fichiers fichier1.txt et fichier2.txt."
  },
  {
    "objectID": "docs/configure.html#security",
    "href": "docs/configure.html#security",
    "title": "Configuration des services",
    "section": "",
    "text": "C’est le mot de passe à saisir lorsqu’on ouvre un service, celui donné par “Copier le mot de passage” sur la page des services. Il est fourni par le paramètre général “Mot de passe pour vos services” que l’on trouve dans “Mon Compte” &gt; “Informations du compte”, sauf si on en a défini un particulier au niveau du service.\n\n\n\nSi coché, le service n’est accessible que par une seule IP, à décocher si l’on souhaite travailler de deux endroits différents."
  },
  {
    "objectID": "docs/configure.html#git",
    "href": "docs/configure.html#git",
    "title": "Configuration des services",
    "section": "",
    "text": "Pour apprendre à utiliser cet onglet, voir la page dédiée.\n\n\n\n\n\n\nAvertissement\n\n\n\nIl n’est pas possible de cloner automatiquement un projet privé d’une instance privée (c’est-à-dire autre que gitlab.com et github.com). Pour le faire, il faudra recourir à un script shell comme indiqué ici.\n\n\n\n\nSi coché, configure Git et tente un clone au démarrage du service.\n\n\n\nLe nom qui apparaîtra dans les commits (pas le nom d’utilisateur du compte Gitlab ou Github).\n\n\n\nL’adresse email qui apparaîtra dans les commits (pas forcément le mail associé au compte Gitlab ou Github).\n\n\n\n\n\n\nJeton d’accès défini sur la plateforme utilisée (Gitlab, Github…).\n\n\n\nL’URL obtenue sur la plateforme utilisée (Gitlab, Github…) en cliquant sur “Cloner” &gt; HTTPS.\nDe type :\nhttps://github.com/InseeFrLab/docs.sspcloud.fr.git\n\n\n\n\n\n\n\n\n\n\n\n\nPour apprendre à utiliser cet onglet, voir la page dédiée.\n\n\n\nOptions to pass to the initialization script, separated by spaces and can be subsequently called with $1, $2, etc.\nFor example, if you enter file1.txt file2.txt in the PersonalInitArgs field and use this initialization script:\n#!/bin/bash\ntouch $1\ntouch $2\nThe script will create two files, file1.txt and file2.txt, using the touch command."
  },
  {
    "objectID": "docs/configure.html#security-1",
    "href": "docs/configure.html#security-1",
    "title": "Configuration des services",
    "section": "",
    "text": "This is the password to enter when opening a service, which is provided by “Copy the password” on the service page. It is supplied by the general parameter “Password for your services,” which can be found in “My Account” &gt; “Account Information,” unless a specific one is defined at the service level.\n\n\n\nIf checked, the service is only accessible from a single IP. Uncheck it if you wish to work from different locations."
  },
  {
    "objectID": "docs/configure.html#git-1",
    "href": "docs/configure.html#git-1",
    "title": "Configuration des services",
    "section": "",
    "text": "To learn how to use this tab, see the dedicated page.\n\n\n\n\n\n\nAvertissement\n\n\n\nIt is not possible to automatically clone a private project from a private instance (i.e., other than gitlab.com and github.com). To do so, you will need to use a shell script as indicated here.\n\n\n\n\nIf checked, configure Git and attempt a clone when the service starts.\n\n\n\nThe name that will appear in the commits (not the Gitlab or Github account username).\n\n\n\nThe email address that will appear in the commits (not necessarily the email associated with the Gitlab or Github account).\n\n\n\n\n\n\nAccess token defined on the platform used (Gitlab, Github…).\n\n\n\nThe URL obtained from the platform used (Gitlab, Github…) by clicking on “Clone” &gt; HTTPS.\nIn the format:\nhttps://github.com/InseeFrLab/docs.sspcloud.fr.git\n\n\n\n\n\n\n\n\n\n\n\n\nTo learn how to use this tab, see the dedicated page.\n:::"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Documentation",
    "section": "",
    "text": "Documentation"
  },
  {
    "objectID": "docs/discover.html",
    "href": "docs/discover.html",
    "title": "Première utilisation",
    "section": "",
    "text": "Bienvenue sur le Datalab Onyxia, plateforme libre service mutualisée de traitement de données, destinée aux statisticiens et data scientists de l’Etat. Ce tutoriel propose une visite guidée du Datalab pour être rapidement opérationnel dans l’utilisation de ses services.\n\n\n\n\n\n\nAvertissement\n\n\n\nLes conditions d’utilisation du Datalab sont consultables à cette adresse. Nous rappelons que le Datalab est destiné exclusivement au traitement de données publiques et non-sensibles. Des projets d’expérimentation mobilisant des données non ouvertes peuvent être menés en concertation avec l’équipe du Datalab, sous réserve de se conformer aux règles de sécurité spécifiques au projet.\n\n\n\n\nLe catalogue de services est au centre de l’utilisation du Datalab. Il propose un ensemble de services destinés aux traitements statistiques de données ainsi qu’à la gestion complète des projets de data science.\n\n\n\nPour lancer un service, il suffit de cliquer sur le bouton Lancer du service désiré\nUne page centrée sur le service demandé s’ouvre alors, qui offre plusieurs possibilités :\n\ncliquer à nouveau sur le bouton Lancer pour lancer le service avec sa configuration par défaut ;\npersonnaliser le nom que portera l’instance une fois le service lancé ;\ndérouler un menu de configuration afin de personnaliser la configuration du service avant de le lancer ;\nsauvegarder une configuration personnalisée en cliquant sur le signet en haut à droite du service.\n\n\nLa configuration précise des services du Datalab constitue un usage avancé et n’est donc pas traité dans ce tutoriel, mais dans d’autres pages de ce site documentaire.\n\n\n\n\nL’action de lancer un service amène automatiquement sur la page Mes Services, où sont listées toutes les instances en activité sur le compte de l’utilisateur.\n\nUne fois le service lancé, un bouton Ouvrir apparaît qui permet l’accès au service. Un mot de passe — et, selon les services, un nom d’utilisateur — est généralement requis pour pouvoir utiliser le service. Ces informations sont disponibles dans le README associé au service, auquel on accède en cliquant sur le bouton du même nom.\n\n\n\nSupprimer une instance d’un service s’effectue simplement en cliquant sur l’icône en forme de poubelle en dessous de l’instance.\n\n\n\n\n\n\nMise en garde\n\n\n\nPour certains services, la suppression d’une instance entraîne la suppression de toutes les données associées, et cette action est irrémédiable. Il est donc nécessaire de toujours bien lire le README associé à l’instance, qui précise les conséquences d’une suppression de l’instance. De manière générale, il est très important de s’assurer que les données ainsi que le code utilisés sont sauvegardés avant de supprimer l’instance. L’idéal est de versionner son code avec Git et de procéder à des sauvegardes régulières des données à l’aide du système de stockage S3.\n\n\n\n\n\n\n\n\nMise en garde\n\n\n\nLes ressources mises à disposition pour l’execution des services sont partagées entre les différents utilisateurs du Datalab. Veuillez à ne pas laisser en cours des services dont vous ne faites plus l’usage. Nous procédons parfois à une suppression systématique des instances inactives depuis un certain temps, afin de libérer des ressources.\n\n\n\n\n\n\nLe support et l’aide à l’utilisation du Datalab sont effectuées sur un salon dédié du service de messagerie instantanée interministériel Tchap. Toute question sur l’utilisation du Datalab ou suggestion d’amélioration y sont les bienvenues.\nPour les agents n’utilisant pas Tchap, il est également possible de nous contacter par mail sur la BAL innovation@insee.fr."
  },
  {
    "objectID": "docs/discover.html#le-catalogue-de-services",
    "href": "docs/discover.html#le-catalogue-de-services",
    "title": "Première utilisation",
    "section": "",
    "text": "Le catalogue de services est au centre de l’utilisation du Datalab. Il propose un ensemble de services destinés aux traitements statistiques de données ainsi qu’à la gestion complète des projets de data science.\n\n\n\nPour lancer un service, il suffit de cliquer sur le bouton Lancer du service désiré\nUne page centrée sur le service demandé s’ouvre alors, qui offre plusieurs possibilités :\n\ncliquer à nouveau sur le bouton Lancer pour lancer le service avec sa configuration par défaut ;\npersonnaliser le nom que portera l’instance une fois le service lancé ;\ndérouler un menu de configuration afin de personnaliser la configuration du service avant de le lancer ;\nsauvegarder une configuration personnalisée en cliquant sur le signet en haut à droite du service.\n\n\nLa configuration précise des services du Datalab constitue un usage avancé et n’est donc pas traité dans ce tutoriel, mais dans d’autres pages de ce site documentaire.\n\n\n\n\nL’action de lancer un service amène automatiquement sur la page Mes Services, où sont listées toutes les instances en activité sur le compte de l’utilisateur.\n\nUne fois le service lancé, un bouton Ouvrir apparaît qui permet l’accès au service. Un mot de passe — et, selon les services, un nom d’utilisateur — est généralement requis pour pouvoir utiliser le service. Ces informations sont disponibles dans le README associé au service, auquel on accède en cliquant sur le bouton du même nom.\n\n\n\nSupprimer une instance d’un service s’effectue simplement en cliquant sur l’icône en forme de poubelle en dessous de l’instance.\n\n\n\n\n\n\nMise en garde\n\n\n\nPour certains services, la suppression d’une instance entraîne la suppression de toutes les données associées, et cette action est irrémédiable. Il est donc nécessaire de toujours bien lire le README associé à l’instance, qui précise les conséquences d’une suppression de l’instance. De manière générale, il est très important de s’assurer que les données ainsi que le code utilisés sont sauvegardés avant de supprimer l’instance. L’idéal est de versionner son code avec Git et de procéder à des sauvegardes régulières des données à l’aide du système de stockage S3.\n\n\n\n\n\n\n\n\nMise en garde\n\n\n\nLes ressources mises à disposition pour l’execution des services sont partagées entre les différents utilisateurs du Datalab. Veuillez à ne pas laisser en cours des services dont vous ne faites plus l’usage. Nous procédons parfois à une suppression systématique des instances inactives depuis un certain temps, afin de libérer des ressources."
  },
  {
    "objectID": "docs/discover.html#support",
    "href": "docs/discover.html#support",
    "title": "Première utilisation",
    "section": "",
    "text": "Le support et l’aide à l’utilisation du Datalab sont effectuées sur un salon dédié du service de messagerie instantanée interministériel Tchap. Toute question sur l’utilisation du Datalab ou suggestion d’amélioration y sont les bienvenues.\nPour les agents n’utilisant pas Tchap, il est également possible de nous contacter par mail sur la BAL innovation@insee.fr."
  },
  {
    "objectID": "docs/secrets.html",
    "href": "docs/secrets.html",
    "title": "Gestion des secrets",
    "section": "",
    "text": "Gestion des secrets\n\nLes variables d’environnement;\nIl arrive que certaines informations doivent être mise à disposition d’un grand nombre d’applications, ou ne doivent pas figurer en clair dans votre code (jetons d’accès, mots de passe, etc.). L’utilisation de variables d’environnement permet de pouvoir accéder à ces informations depuis n’importe quel service.\nAu lancement d’un service, plusieurs variables d’environnement sont déjà injectées automatiquement — par exemple, les tokens d’accès à ``\n\n\n\nCréation et gestion de secrets\nSur la plateforme, les variables d’environnement sont des secrets écrits dans Vault (le coffre fort du Datalab) et sont chiffrées. Cela vous permet d’y stocker des jetons, des identifiants et des mots de passe. La page Mes secrets prends la forme d’un explorateur de fichiers où vous pouvez trier et hiérarchiser vos variables dans des dossiers.\n\nPour commencer :\n\nCréez un nouveau dossier + Nouveau dossier\nPuis dans ce dossier, créez un nouveau secret + Nouveau secret\nOuvrez votre secret \n\n\nChaque secret peut contenir plusieurs variables, composés de paires de clés-valeurs.\n\n + Ajouter une variable\n\n\n\n\n\n\n\n\nNote\n\n\n\nLes clés (nom de la variable) commencent toujours par$et contiennent uniquement des lettres, des chiffres et le caractère de soulignement (_). Par convention, les clefs s’écrivent en MAJUSCULE.\n\n\nRemplissez le champ du nom de la clef puis sa valeur.\n\n\n\nConvertir des secrets en variables d’environnement\nUne fois votre secret édité, avec ses différentes variables, vous êtes prêt à l’utiliser dans votre service. \n\nCopiez le chemin du secret en cliquant sur le bouton Utiliser dans un service\nPuis au moment de la configuration de votre service, allez dans l’onglet Vaultet collez le chemin du secret dans le champ dédié\n\n\n\nCréez et ouvrez votre service\n\nPour vérifier que vos variables d’environnement ont bien été crées, vous pouvez lancer les commandes suivantes dans le terminal du service :\n# Lister toutes les variables d'environnement disponibles\nenv \n\n# Afficher la valeur d'une variable d'environnement\necho $MA_VARIABLE \n\n# Trouver toutes les variables d'environnement qui contiennent un pattern donné\nenv | grep -i \"&lt;PATTERN&gt;\""
  }
]