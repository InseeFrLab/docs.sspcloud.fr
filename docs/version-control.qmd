::: {.content-visible when-profile="fr"}

# Contrôle de version

## Pourquoi utiliser le contrôle de version ?

Le Datalab est une plateforme mutualisée : les ressources utilisées par les services sont partagées entre les différents utilisateurs. A ce titre, les services du Datalab fonctionnent sur le modèle des conteneurs éphémères : dans un usage standard, l'utilisateur lance un service, réalise des traitements de données, sauvegarde le code qui a permis de réaliser ces traitements, et supprime l'instance du service. Cette sauvegarde du code est grandement facilitée par l'usage du contrôle de version.

Cette considération de performance ne doit cependant pas être vue comme une contrainte : le contrôle de version est une bonne pratique essentielle de développement. Les bénéfices sont nombreux, aussi bien à titre individuel :&#x20;

* le projet local est synchronisé avec un serveur distant, rendant la perte de code quasi impossible ;&#x20;
* l'historique complet des choix et modifications effectuées sur le projet est conservé ;
* l'utilisateur peut parcourir cet historique pour rechercher les modifications qui ont pu créer des erreurs, et décider à tout moment de revenir à une version précédente du projet, ou bien de certains fichiers.

que dans le cadre de projets collaboratifs :&#x20;

* le travail simultané sur un même projet est possible, sans risque de perte ;&#x20;
* l'utilisateur peut partager ses modifications tout en bénéficiant de celles des autres ;
* il devient possible de contribuer à des projets open-source, pour lesquels l'usage de Git est très largement standard.

::: {.callout-warning}
Ce tutoriel vise à présenter comment le contrôle de version peut être facilement implémenté grâce aux outils présents sur le Datalab. Il ne présente pas le fonctionnement de Git et présuppose donc une certaine familiarité avec l'outil. De nombreuses ressources en ligne peuvent servir d'introduction ; l'utilisateur de R pourra par exemple consulter [ce guide](https://linogaliana.gitlab.io/collaboratif/git.html) et l'utilisateur de Python ce [chapitre de cours](https://linogaliana-teaching.netlify.app/course/git/). Une formation complète à Git sera bientôt proposée dans l'[espace formation ](https://www.sspcloud.fr/documentation)du Datalab.
:::

## Intégration de GitHub avec le Datalab

### Pourquoi GitHub ?

Bien qu'une utilisation hors-ligne de Git soit possible, tout l'intérêt du contrôle de version réside dans la synchronisation de la copie locale d'un projet (_clone_) avec un dépôt distant (_remote_). Différents services de forge logicielle permettent cette synchronisation des projets Git, dont les plus connus sont [GitHub ](https://github.com)et [GitLab](https://about.gitlab.com). Dans la mesure où le premier dispose aujourd'hui de beaucoup plus de visibilité — par exemple, les dépôts de l'Insee, [InseeFr ](https://github.com/InseeFrL)et [InseeFrLab](https://github.com/InseeFrLab), sont sur GitHub — le Datalab propose une intégration facilitée avec GitHub, que nous présentons à travers ce tutoriel.

::: {.callout-warning}
La suite du tutoriel nécessite de disposer d'un [compte GitHub](https://github.com/join).
:::

::: {.callout-note}
Si l'utilisation du Datalab avec la plateforme GitHub est facilitée, elle n'est en aucun cas obligatoire : il reste tout à fait possible d'utiliser la forge logicielle de son choix pour la synchronisation des projets. Une [forge basée sur GitLab ](https://git.lab.sspcloud.fr)est notamment mise à disposition des utilisateurs du Datalab.
:::

### Créer un jeton d'accès (_token_)

La synchronisation avec un dépôt distant nécessite une authentification auprès de GitHub. Celle-ci s'effectue à l'aide d'un jeton d'accès personnel, qui doit être généré à partir du compte GitHub de l'utilisateur. Le service de génération est accessible à [cette adresse](https://github.com/settings/tokens). La [documentation GitHub ](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)(en Anglais) propose des illustrations pour guider le processus.

Pour générer un jeton, il est nécessaire de choisir un nom de jeton, un délai d'expiration et des droits d'accès (_scope_). Il est recommandé de choisir un délai court (30 jours) et un accès restreint (_repo_ seulement) afin de limiter les risques de sécurité en cas de diffusion malveillante du jeton.&#x20;

![Configuration recommandée pour la génération d'un jeton d'accès GitHub](img/github-token.png)

Une fois le jeton généré, ce dernier apparaît à l'écran. Un jeton ne peut être visualisé qu'une seule fois ; en cas de perte, il faudra en générer un nouveau.&#x20;

### Ajouter le jeton d'accès au Datalab

Il est recommandé d'ajouter ses jetons d'accès à un gestionnaire de mots de passe. Le jeton peut également être ajouté à la configuration "Services externes" du compte utilisateur sur le Datalab, ce qui permet au jeton d'être directement accessible au sein des services proposés sur la plateforme.

![Ajouter un jeton d'accès GitHub à un compte utilisateur sur le Datalab](img/onyxia-git-token.png)

::: {.callout-warning}
Attention à bien utiliser dans les "Informations du compte" l'adresse mail associée à votre compte GitHub, c'est elle qui permet de lier effectivement les _commits_ que vous effectuerez à votre compte GitHub.
:::

## Utiliser Git avec les services du Datalab

Git est préconfiguré pour fonctionner nativement avec les différents services pertinents du Datalab. A l'ouverture d'un service, il est possible de configurer certains éléments. Si l'on a ajouté un jeton d'accès GitHub à son compte sur le Datalab, ce dernier est pré-configuré. Il est par ailleurs possible d'indiquer l'URL **complète** d'un _Repository_ Git (ex : [https://github.com/InseeFrLab/onyxia](https://github.com/InseeFrLab/onyxia)), qui sera alors cloné à l'initialisation dans l'espace de travail de l'instance.

![Configuration de Git à l'ouverture d'un service](img/rstudio-git-config.png)

### Via le terminal

Le jeton d'accès GitHub est disponible dans le terminal des différents services via la variable d'environnement `$GIT_PERSONAL_ACCESS_TOKEN`. Afin d'éviter de devoir s'authentifier à chaque opération impliquant le dépôt distant (_clone_, _push_ & _pull_), il est recommandé de cloner celui-ci en incluant le jeton d'accès dans le lien HTTPS, à l'aide de la commande suivante :

`git clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/<owner>/<repo>.git`

où \<owner> et \<repo> sont à remplacer respectivement par le nom d'utilisateur et le nom du dépôt GitHub.

### Via des interfaces graphiques intégrées

Les principaux services de production de code disponibles sur le Datalab disposent d'une interface graphique pour faciliter l'utilisation de Git :&#x20;

* RStudio : RStudio propose une interface graphique pour Git native et assez complète. La [documentation utilitR](https://www.book.utilitr.org/03_fiches_thematiques/fiche_git_utilisation) présente son fonctionnement en détail ;
* Jupyter : le plugin [jupyterlab-git ](https://github.com/jupyterlab/jupyterlab-git)permet un interfaçage (assez sommaire) de Jupyter avec Git ;
* VSCode : VSCode propose nativement une interface graphique très bien intégrée avec Git et GitHub. Une [documentation détaillée ](https://code.visualstudio.com/docs/editor/versioncontrol)(en Anglais) présente les possibilités de l'outil.&#x20;

::: {.callout-warning}
Les interfaces graphiques facilitent la prise en main de Git, mais ne remplacent jamais complètement l'usage de l'outil via un terminal du fait d'une intégration nécessairement imparfaite. Il est donc utile de se familiariser avec l'usage de Git via le terminal le plus tôt possible.
:::

:::













::: {.content-visible when-profile="en"}

# Version Control

## Why use version control?

The Datalab is a shared platform where resources used by services are shared among different users. As such, Datalab services operate on the model of ephemeral containers: in a standard usage, the user launches a service, performs data processing, saves the code that was used to perform these processes, and then deletes the service instance. This code backup is greatly facilitated by the use of version control.

However, this performance consideration should not be seen as a constraint: version control is an essential best practice in development. The benefits are numerous, both individually:

* The local project is synchronized with a remote server, making the loss of code almost impossible.
* The complete history of choices and modifications made on the project is preserved.
* The user can browse this history to search for modifications that may have caused errors and decide at any time to revert to a previous version of the project or specific files.

and in the context of collaborative projects:

* Simultaneous work on the same project is possible without the risk of loss.
* The user can share their modifications while benefiting from the changes made by others.
* It becomes possible to contribute to open-source projects, for which the use of Git is widely standard.

::: {.callout-warning} 
This tutorial aims to present how version control can be easily implemented using the tools available on the Datalab. It does not explain the workings of Git and presupposes a certain familiarity with the tool. Many online resources can serve as an introduction; for example, R users can consult [this guide](https://linogaliana.gitlab.io/collaboratif/git.html), and Python users can refer to [this chapter of the course](https://linogaliana-teaching.netlify.app/course/git/). A comprehensive Git training will soon be offered in the [training space](https://www.sspcloud.fr/documentation) of the Datalab. 
:::

## Integrating GitHub with Datalab

### Why GitHub?

Although offline use of Git is possible, the real benefit of version control lies in synchronizing the local copy of a project (*clone*) with a remote repository (*remote*). Various software forge services allow this synchronization of Git projects, the most well-known of which are [GitHub](https://github.com) and [GitLab](https://about.gitlab.com). Since GitHub has much more visibility today — for example, the repositories of Insee, [InseeFr](https://github.com/InseeFrL), and [InseeFrLab](https://github.com/InseeFrLab), are on GitHub — Datalab offers an integration with GitHub, which we present in this tutorial.

::: {.callout-warning} 
The rest of the tutorial requires having a [GitHub account](https://github.com/join). 
:::

::: {.callout-note} 
While using Datalab with the GitHub platform is facilitated, it is by no means mandatory: it is still possible to use the software forge of your choice for project synchronization. A [forge based on GitLab](https://git.lab.sspcloud.fr) is also available to Datalab users. 
:::

### Creating an access token

Synchronization with a remote repository requires authentication with GitHub. This is done using a personal access token, which must be generated from the user's GitHub account. The generation service is accessible at [this address](https://github.com/settings/tokens). The [GitHub documentation](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token) provides illustrations to guide the process.

To generate a token, it is necessary to choose a token name, an expiration date, and access rights (*scope*). It is recommended to choose a short expiration date (30 days) and limited access (*repo* only) to reduce security risks in case the token is maliciously exposed.

![Recommended configuration for generating a GitHub access token](img/github-token.png)

Once the token is generated, it will be displayed on the screen. A token can only be viewed once; if lost, a new one must be generated.

### Adding the access token to Datalab

It is recommended to add access tokens to a password manager. Alternatively, the token can be added to the "External Services" configuration of the user account on Datalab, which allows the token to be directly accessible within the services offered on the platform.

![Adding a GitHub access token to a user account on Datalab](img/onyxia-git-token.png)

::: {.callout-warning} 
Be sure to use the email address associated with your GitHub account in the "Account Information." It is this address that effectively links the commits you make to your GitHub account. 
:::

## Using Git with Datalab services

Git is pre-configured to work natively with the relevant Datalab services. When opening a service, it is possible to configure certain elements. If you have added a GitHub access token to your Datalab account, it will be pre-configured. It is also possible to indicate the **complete** URL of a Git repository (e.g., [https://github.com/InseeFrLab/onyxia](https://github.com/InseeFrLab/onyxia)), which will then be cloned into the instance's workspace during initialization.

![Configuring Git when opening a service](img/rstudio-git-config.png)

### Via the terminal

The GitHub access token is available in the terminals of different services via the environment variable `$GIT_PERSONAL_ACCESS_TOKEN`. To avoid having to authenticate for every operation involving the remote repository (clone, push, and pull), it is recommended to clone it, including the access token in the HTTPS link, using the following command:

`git clone https://${GIT_PERSONAL_ACCESS_TOKEN}@github.com/<owner>/<repo>.git`

where <owner> and <repo> should be replaced with the GitHub username and repository name, respectively.

### Via integrated graphical interfaces

The main code production services available on Datalab have a graphical interface to facilitate the use of Git:

* RStudio: RStudio provides a native and fairly comprehensive graphical interface for Git. The [utilitR documentation](https://www.book.utilitr.org/03_fiches_thematiques/fiche_git_utilisation) presents its operation in detail.
* Jupyter: the [jupyterlab-git plugin](https://github.com/jupyterlab/jupyterlab-git) provides a (fairly basic) interface between Jupyter and Git.
* VSCode: VSCode natively offers a well-integrated graphical interface with Git and GitHub. A [detailed documentation](https://code.visualstudio.com/docs/editor/versioncontrol) presents the possibilities of the tool.

::: {.callout-warning} 
Graphical interfaces make it easier to get started with Git but never completely replace the use of the tool via a terminal due to necessarily imperfect integration. Therefore, it is useful to familiarize yourself with using Git via the terminal as early as possible. 
:::

:::